
.. _program_listing_file_include_pmeta_attributes.hpp:

Program Listing for File attributes.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_pmeta_attributes.hpp>` (``include/pmeta/attributes.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   
   #include <pmeta/standards.hpp>
   
   #if defined(__has_attribute)
   #    define PMETA_HAS_COMPILER_ATTRIBUTE(x) __has_attribute(x)
   #else
   #    define PMETA_HAS_COMPILER_ATTRIBUTE(x) 0
   #endif
   
   #if defined(__has_cpp_attribute)
   #    define PMETA_HAS_CPP_ATTRIBUTE(x) __has_cpp_attribute(x)
   #else
   #    define PMETA_HAS_CPP_ATTRIBUTE(x) 0
   #endif
   
   #define PMETA_HAS_ATTRIBUTE(x) \
       (PMETA_HAS_CPP_ATTRIBUTE(x) || PMETA_HAS_COMPILER_ATTRIBUTE(x))
   
   #if PMETA_CPP_STD14
   #    define PMETA_CONSTEXPR_14 constexpr
   #else
   #    define PMETA_CONSTEXPR_14 inline
   #endif
   
   #if PMETA_CPP_STD17
   #    define PMETA_CONSTEXPR_17 constexpr
   #else
   #    define PMETA_CONSTEXPR_17 inline
   #endif
   
   #if PMETA_CPP_STD20
   #    define PMETA_CONSTEXPR_20 constexpr
   #else
   #    define PMETA_CONSTEXPR_20 inline
   #endif
   
   #if PMETA_HAS_CPP_ATTRIBUTE(cold)
   #    define PMETA_COLD [[gnu::cold]]
   #elif PMETA_HAS_COMPILER_ATTRIBUTE(cold)
   #    define PMETA_COLD __attribute__((cold))
   #else
   #    define PMETA_COLD
   #endif
   
   #if PMETA_HAS_CPP_ATTRIBUTE(maybe_unused) && PMETA_CPP_STD17
   #    define PMETA_UNUSED [[maybe_unused]]
   #elif PMETA_HAS_CPP_ATTRIBUTE(unused)
   #    define PMETA_UNUSED [[gnu::unused]]
   #elif PMETA_HAS_COMPILER_ATTRIBUTE(unused)
   #    define PMETA_UNUSED __attribute__((unused))
   #else
   #    define PMETA_UNUSED
   #endif
